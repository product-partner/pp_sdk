# coding: utf-8

"""
    Product Partner API

    Product Partner APIs can create, list, and modify goals, prds, status updates, and other product management artifacts.

    The version of the OpenAPI document: v1
    Contact: info@productpartner.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OrganizationSetup(BaseModel):
    """
    OrganizationSetup
    """ # noqa: E501
    id: Optional[StrictStr] = None
    organization: Optional[StrictStr] = None
    project_system_setup_state: Optional[StrictStr] = None
    repo_setup_state: Optional[StrictStr] = None
    document_setup_state: Optional[StrictStr] = None
    retro_setup_state: Optional[StrictStr] = None
    users_setup_state: Optional[StrictStr] = None
    company_setup_state: Optional[StrictStr] = None
    setup_complete: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["id", "organization", "project_system_setup_state", "repo_setup_state", "document_setup_state", "retro_setup_state", "users_setup_state", "company_setup_state", "setup_complete"]

    @field_validator('project_system_setup_state')
    def project_system_setup_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NOT_STARTED', 'IN_PROGRESS', 'COMPLETED', 'SKIPPED', 'DONT_REMIND']):
            raise ValueError("must be one of enum values ('NOT_STARTED', 'IN_PROGRESS', 'COMPLETED', 'SKIPPED', 'DONT_REMIND')")
        return value

    @field_validator('repo_setup_state')
    def repo_setup_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NOT_STARTED', 'IN_PROGRESS', 'COMPLETED', 'SKIPPED', 'DONT_REMIND']):
            raise ValueError("must be one of enum values ('NOT_STARTED', 'IN_PROGRESS', 'COMPLETED', 'SKIPPED', 'DONT_REMIND')")
        return value

    @field_validator('document_setup_state')
    def document_setup_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NOT_STARTED', 'IN_PROGRESS', 'COMPLETED', 'SKIPPED', 'DONT_REMIND']):
            raise ValueError("must be one of enum values ('NOT_STARTED', 'IN_PROGRESS', 'COMPLETED', 'SKIPPED', 'DONT_REMIND')")
        return value

    @field_validator('retro_setup_state')
    def retro_setup_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NOT_STARTED', 'IN_PROGRESS', 'COMPLETED', 'SKIPPED', 'DONT_REMIND']):
            raise ValueError("must be one of enum values ('NOT_STARTED', 'IN_PROGRESS', 'COMPLETED', 'SKIPPED', 'DONT_REMIND')")
        return value

    @field_validator('users_setup_state')
    def users_setup_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NOT_STARTED', 'IN_PROGRESS', 'COMPLETED', 'SKIPPED', 'DONT_REMIND']):
            raise ValueError("must be one of enum values ('NOT_STARTED', 'IN_PROGRESS', 'COMPLETED', 'SKIPPED', 'DONT_REMIND')")
        return value

    @field_validator('company_setup_state')
    def company_setup_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NOT_STARTED', 'IN_PROGRESS', 'COMPLETED', 'SKIPPED', 'DONT_REMIND']):
            raise ValueError("must be one of enum values ('NOT_STARTED', 'IN_PROGRESS', 'COMPLETED', 'SKIPPED', 'DONT_REMIND')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrganizationSetup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "organization",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrganizationSetup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "organization": obj.get("organization"),
            "project_system_setup_state": obj.get("project_system_setup_state"),
            "repo_setup_state": obj.get("repo_setup_state"),
            "document_setup_state": obj.get("document_setup_state"),
            "retro_setup_state": obj.get("retro_setup_state"),
            "users_setup_state": obj.get("users_setup_state"),
            "company_setup_state": obj.get("company_setup_state"),
            "setup_complete": obj.get("setup_complete")
        })
        return _obj


