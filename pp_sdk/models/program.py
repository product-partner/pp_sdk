# coding: utf-8

"""
    Product Partner API

    Product Partner APIs can create, list, and modify goals, prds, status updates, and other product management artifacts.

    The version of the OpenAPI document: v1
    Contact: chris@productpartner.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from pp_sdk.models.tags_inner import TagsInner
from pp_sdk.models.user_field import UserField
from pp_sdk.models.user_list_of_user_fields_inner import UserListOfUserFieldsInner
from typing import Optional, Set
from typing_extensions import Self

class Program(BaseModel):
    """
    Program
    """ # noqa: E501
    id: Optional[StrictStr] = None
    name: Annotated[str, Field(min_length=1, strict=True, max_length=255)]
    description: Optional[StrictStr] = None
    mission: Optional[StrictStr] = None
    charter: Optional[StrictStr] = None
    principal_users: Optional[List[UserListOfUserFieldsInner]] = Field(default=None, description="Can accept either a list of user IDs (strings) or a list of objects with id field")
    stakeholder_users: Optional[List[UserListOfUserFieldsInner]] = Field(default=None, description="Can accept either a list of user IDs (strings) or a list of objects with id field")
    parent: Optional[StrictStr] = None
    tags: Optional[List[TagsInner]] = None
    created_by: Optional[UserField] = None
    created_date: Optional[datetime] = None
    modified_date: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["id", "name", "description", "mission", "charter", "principal_users", "stakeholder_users", "parent", "tags", "created_by", "created_date", "modified_date"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Program from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "created_date",
            "modified_date",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in principal_users (list)
        _items = []
        if self.principal_users:
            for _item_principal_users in self.principal_users:
                if _item_principal_users:
                    _items.append(_item_principal_users.to_dict())
            _dict['principal_users'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in stakeholder_users (list)
        _items = []
        if self.stakeholder_users:
            for _item_stakeholder_users in self.stakeholder_users:
                if _item_stakeholder_users:
                    _items.append(_item_stakeholder_users.to_dict())
            _dict['stakeholder_users'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict['tags'] = _items
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if mission (nullable) is None
        # and model_fields_set contains the field
        if self.mission is None and "mission" in self.model_fields_set:
            _dict['mission'] = None

        # set to None if charter (nullable) is None
        # and model_fields_set contains the field
        if self.charter is None and "charter" in self.model_fields_set:
            _dict['charter'] = None

        # set to None if parent (nullable) is None
        # and model_fields_set contains the field
        if self.parent is None and "parent" in self.model_fields_set:
            _dict['parent'] = None

        # set to None if created_date (nullable) is None
        # and model_fields_set contains the field
        if self.created_date is None and "created_date" in self.model_fields_set:
            _dict['created_date'] = None

        # set to None if modified_date (nullable) is None
        # and model_fields_set contains the field
        if self.modified_date is None and "modified_date" in self.model_fields_set:
            _dict['modified_date'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Program from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "mission": obj.get("mission"),
            "charter": obj.get("charter"),
            "principal_users": [UserListOfUserFieldsInner.from_dict(_item) for _item in obj["principal_users"]] if obj.get("principal_users") is not None else None,
            "stakeholder_users": [UserListOfUserFieldsInner.from_dict(_item) for _item in obj["stakeholder_users"]] if obj.get("stakeholder_users") is not None else None,
            "parent": obj.get("parent"),
            "tags": [TagsInner.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "created_by": UserField.from_dict(obj["created_by"]) if obj.get("created_by") is not None else None,
            "created_date": obj.get("created_date"),
            "modified_date": obj.get("modified_date")
        })
        return _obj


