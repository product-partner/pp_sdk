# coding: utf-8

"""
    Product Partner API

    Product Partner APIs can create, list, and modify goals, prds, status updates, and other product management artifacts.

    The version of the OpenAPI document: v1
    Contact: chris@productpartner.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from pp_sdk.models.created_by import CreatedBy
from pp_sdk.models.goal_base import GoalBase
from typing import Optional, Set
from typing_extensions import Self

class Status(BaseModel):
    """
    Status
    """ # noqa: E501
    id: Optional[StrictStr] = None
    goal: StrictStr
    goal_details: Optional[GoalBase] = None
    status: Optional[StrictStr] = None
    status_display: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None
    var_date: Optional[datetime] = Field(default=None, alias="date")
    status_note: Optional[StrictStr] = None
    path_to_green: Optional[StrictStr] = None
    publishing_state: Optional[StrictStr] = None
    created_by: Optional[CreatedBy] = None
    created_date: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["id", "goal", "goal_details", "status", "status_display", "date", "status_note", "path_to_green", "publishing_state", "created_by", "created_date"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RED', 'YELLOW', 'GREEN', 'NOT_STARTED', 'COMPLETED', 'COMPLETED_LATE', 'CANCELLED', 'DEFERRED', 'DELETED']):
            raise ValueError("must be one of enum values ('RED', 'YELLOW', 'GREEN', 'NOT_STARTED', 'COMPLETED', 'COMPLETED_LATE', 'CANCELLED', 'DEFERRED', 'DELETED')")
        return value

    @field_validator('publishing_state')
    def publishing_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PENDING_REVIEW', 'DRAFT', 'REJECTED', 'APPROVED', 'PUBLISHED']):
            raise ValueError("must be one of enum values ('PENDING_REVIEW', 'DRAFT', 'REJECTED', 'APPROVED', 'PUBLISHED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Status from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "status_display",
            "created_date",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of goal_details
        if self.goal_details:
            _dict['goal_details'] = self.goal_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # set to None if var_date (nullable) is None
        # and model_fields_set contains the field
        if self.var_date is None and "var_date" in self.model_fields_set:
            _dict['date'] = None

        # set to None if status_note (nullable) is None
        # and model_fields_set contains the field
        if self.status_note is None and "status_note" in self.model_fields_set:
            _dict['status_note'] = None

        # set to None if path_to_green (nullable) is None
        # and model_fields_set contains the field
        if self.path_to_green is None and "path_to_green" in self.model_fields_set:
            _dict['path_to_green'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Status from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "goal": obj.get("goal"),
            "goal_details": GoalBase.from_dict(obj["goal_details"]) if obj.get("goal_details") is not None else None,
            "status": obj.get("status"),
            "status_display": obj.get("status_display"),
            "date": obj.get("date"),
            "status_note": obj.get("status_note"),
            "path_to_green": obj.get("path_to_green"),
            "publishing_state": obj.get("publishing_state"),
            "created_by": CreatedBy.from_dict(obj["created_by"]) if obj.get("created_by") is not None else None,
            "created_date": obj.get("created_date")
        })
        return _obj


