# coding: utf-8

"""
    Product Partner API

    Product Partner APIs can create, list, and modify goals, prds, status updates, and other product management artifacts.

    The version of the OpenAPI document: v1
    Contact: info@productpartner.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from pp_sdk.models.template_section import TemplateSection
from pp_sdk.models.user_field import UserField
from typing import Optional, Set
from typing_extensions import Self

class Template(BaseModel):
    """
    Template
    """ # noqa: E501
    id: Optional[StrictStr] = None
    name: Annotated[str, Field(min_length=1, strict=True, max_length=255)]
    target_models: Optional[List[StrictStr]] = None
    short_description: Optional[StrictStr] = None
    instructions: Optional[StrictStr] = None
    prompt: Annotated[str, Field(min_length=1, strict=True)]
    examples: Optional[List[StrictStr]] = None
    organization: Optional[StrictStr] = None
    created_by: Optional[UserField] = None
    created_date: Optional[datetime] = None
    modified_date: Optional[datetime] = None
    template_sections: Optional[List[TemplateSection]] = None
    __properties: ClassVar[List[str]] = ["id", "name", "target_models", "short_description", "instructions", "prompt", "examples", "organization", "created_by", "created_date", "modified_date", "template_sections"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Template from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "organization",
            "created_date",
            "modified_date",
            "template_sections",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in template_sections (list)
        _items = []
        if self.template_sections:
            for _item_template_sections in self.template_sections:
                if _item_template_sections:
                    _items.append(_item_template_sections.to_dict())
            _dict['template_sections'] = _items
        # set to None if short_description (nullable) is None
        # and model_fields_set contains the field
        if self.short_description is None and "short_description" in self.model_fields_set:
            _dict['short_description'] = None

        # set to None if instructions (nullable) is None
        # and model_fields_set contains the field
        if self.instructions is None and "instructions" in self.model_fields_set:
            _dict['instructions'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Template from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "target_models": obj.get("target_models"),
            "short_description": obj.get("short_description"),
            "instructions": obj.get("instructions"),
            "prompt": obj.get("prompt"),
            "examples": obj.get("examples"),
            "organization": obj.get("organization"),
            "created_by": UserField.from_dict(obj["created_by"]) if obj.get("created_by") is not None else None,
            "created_date": obj.get("created_date"),
            "modified_date": obj.get("modified_date"),
            "template_sections": [TemplateSection.from_dict(_item) for _item in obj["template_sections"]] if obj.get("template_sections") is not None else None
        })
        return _obj


